from typing import Optional
from fastapi import FastAPI, Path
from pydantic import BaseModel

# Step-1
# Create an app object
# This will be your first endpoint
# Endpoint in API is basically the URL the person goes to and
# when they go to that URL, this is the code that gonna run
app = FastAPI()


# Step-2: Create a basic get request ang get request with additional parameter to send payload information to your API server
# 2.1 Create a basic get() request
# 2.1.1. Specify the endpoint path
# root path ("/")
# get --> the http method | the get request like post, put request
@app.get("/")
def read_root():
    # server does something
    return {"Hello": "World"}  # payload you specified to return


# 2.1.2 Now run the FastAPI server to see the payload and the documentations those auto-generated
# The docs are automatically created when we build our API application
# unicorn main:app --reload
# @browser localhost:8000       # you will see the payload
# @browser localhost:8000/docs  # Docs autogenerated by fastapi
# @browser localhost:8000/redoc # A different way to read the documentations

# 2.2 Create a get() request with additional parameters i.e. item_id and optional query parameter
# endpoint: items/{item_id}
# {item_id} : Variable | type: Integer
# add a query parameter which is a string and by default not need to be included
@app.get("/items/{item_id}")
def read_item(item_id: int, q: Optional[str] = None):
    # code goes here
    # It will take the item_id --> then go to the DB --> retrieve the information --> Finally return it
    return {"item_id": item_id, "q": q}


# 2.2 Let's test the endpoint
# @browser localhost:8000/redoc  # you will see another doc is createed for this endpoint
# investigate the structure of this endpoint and specific response and code it will return on success|200 and failure|422
# @browser localhost:8000/items/2               # 2--> item_id, this has no query parameter included
# @browser localhost:8000/items/2?q=helloworld  # query parameter is "helloworld"|str

# Step-3: Create a put request
# 3.1 Create an Item Class
# every item should have a name and price and an optional offer of type Bool|True,False
class Item(BaseModel): # Item class is inheriting the BaseModel Class
    name: str
    price: float
    if_offer: Optional[bool] = None


@app.put("/items/{item_id}")
def update_item(item_id: int, item: Item):
    # do something
    # i.e. Update the DB --> send the information there and save it --> and returned to the user
    return {"item_name": item.name, "item_id": item_id}
